// Code generated by "enumer -type=BlockType -trimprefix=BlockType"; DO NOT EDIT.

package goodle

import (
	"fmt"
	"strings"
)

const _BlockTypeName = "UnknownLinkFileFolderAssignmentQuiz"

var _BlockTypeIndex = [...]uint8{0, 7, 11, 15, 21, 31, 35}

const _BlockTypeLowerName = "unknownlinkfilefolderassignmentquiz"

func (i BlockType) String() string {
	i -= 1
	if i < 0 || i >= BlockType(len(_BlockTypeIndex)-1) {
		return fmt.Sprintf("BlockType(%d)", i+1)
	}
	return _BlockTypeName[_BlockTypeIndex[i]:_BlockTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BlockTypeNoOp() {
	var x [1]struct{}
	_ = x[BlockTypeUnknown-(1)]
	_ = x[BlockTypeLink-(2)]
	_ = x[BlockTypeFile-(3)]
	_ = x[BlockTypeFolder-(4)]
	_ = x[BlockTypeAssignment-(5)]
	_ = x[BlockTypeQuiz-(6)]
}

var _BlockTypeValues = []BlockType{BlockTypeUnknown, BlockTypeLink, BlockTypeFile, BlockTypeFolder, BlockTypeAssignment, BlockTypeQuiz}

var _BlockTypeNameToValueMap = map[string]BlockType{
	_BlockTypeName[0:7]:        BlockTypeUnknown,
	_BlockTypeLowerName[0:7]:   BlockTypeUnknown,
	_BlockTypeName[7:11]:       BlockTypeLink,
	_BlockTypeLowerName[7:11]:  BlockTypeLink,
	_BlockTypeName[11:15]:      BlockTypeFile,
	_BlockTypeLowerName[11:15]: BlockTypeFile,
	_BlockTypeName[15:21]:      BlockTypeFolder,
	_BlockTypeLowerName[15:21]: BlockTypeFolder,
	_BlockTypeName[21:31]:      BlockTypeAssignment,
	_BlockTypeLowerName[21:31]: BlockTypeAssignment,
	_BlockTypeName[31:35]:      BlockTypeQuiz,
	_BlockTypeLowerName[31:35]: BlockTypeQuiz,
}

var _BlockTypeNames = []string{
	_BlockTypeName[0:7],
	_BlockTypeName[7:11],
	_BlockTypeName[11:15],
	_BlockTypeName[15:21],
	_BlockTypeName[21:31],
	_BlockTypeName[31:35],
}

// BlockTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BlockTypeString(s string) (BlockType, error) {
	if val, ok := _BlockTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BlockTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BlockType values", s)
}

// BlockTypeValues returns all values of the enum
func BlockTypeValues() []BlockType {
	return _BlockTypeValues
}

// BlockTypeStrings returns a slice of all String values of the enum
func BlockTypeStrings() []string {
	strs := make([]string, len(_BlockTypeNames))
	copy(strs, _BlockTypeNames)
	return strs
}

// IsABlockType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BlockType) IsABlockType() bool {
	for _, v := range _BlockTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
